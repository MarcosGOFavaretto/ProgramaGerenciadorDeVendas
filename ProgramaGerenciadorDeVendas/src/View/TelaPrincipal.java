package View;

import Controller.ClientesClass;
import Controller.ProdutosClass;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class TelaPrincipal extends javax.swing.JFrame {

    // VARIÁVEIS GLOBAIS DA CLASSE:
    private String nomeDoArquivo = "";
    private ProdutosClass objeto_produtoclass = null;
    private ResultSet resultset_produtoparainserir = null;
    String[] array_dataatual = null;
    String[] array_horarioatual = null;
    SimpleDateFormat mascara_dia = null;
    SimpleDateFormat mascara_horas = null;
    Date dataatual = null;

    public TelaPrincipal() throws SQLException {
        initComponents();
        //limparInformacoes();
        int leituraatual = 1; // Variável que simula o código lido pelo leitor de código de barras.
        objeto_produtoclass = new ProdutosClass();
        resultset_produtoparainserir = objeto_produtoclass.buscarProdutoNoBanco(leituraatual);
        DefaultTableModel objeto_tabela = (DefaultTableModel) jTbProdutos.getModel();
        objeto_tabela.setNumRows(0);
        while (resultset_produtoparainserir.next()) {
            objeto_tabela.addRow(
                    new Object[]{
                        resultset_produtoparainserir.getInt("nome_produto"),
                        resultset_produtoparainserir.getString("fabricante_produto"),
                        String.valueOf(objeto_produtoclass.getQuantidadeProduto())
                    }
            );
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTbProdutos = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jTxtNomeCliente = new javax.swing.JTextField();
        jBtnInserirManualmente = new javax.swing.JButton();
        jBtnCancelar = new javax.swing.JButton();
        jBtnSalvar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PROGRAMA GERENCIADOR DE VENDAS");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(1080, 720));
        setName("TelaPrincipal"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1080, 720));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("PROGRAMA GERENCIADOR DE VENDAS");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 720, -1));

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator1.setToolTipText("");
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, 716, 22));

        jTbProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nome do produto", "Fabricante", "Quantidade"
            }
        ));
        jScrollPane1.setViewportView(jTbProdutos);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 716, 508));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("NOME COMPLETO DO CLIENTE:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 590, -1, -1));

        jTxtNomeCliente.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTxtNomeCliente.setText("Marcos Gabriel de Oliveira Favaretto");
        getContentPane().add(jTxtNomeCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 620, 716, -1));

        jBtnInserirManualmente.setText("INSERIR MANUALMENTE");
        jBtnInserirManualmente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnInserirManualmenteActionPerformed(evt);
            }
        });
        getContentPane().add(jBtnInserirManualmente, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 620, -1, -1));

        jBtnCancelar.setText("CANCELAR");
        jBtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelarActionPerformed(evt);
            }
        });
        getContentPane().add(jBtnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 590, 151, -1));

        jBtnSalvar.setText("SALVAR");
        jBtnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSalvarActionPerformed(evt);
            }
        });
        getContentPane().add(jBtnSalvar, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 560, 150, -1));

        setSize(new java.awt.Dimension(1096, 759));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void obterDataHorarioAtual() {
        dataatual = new Date();
        mascara_dia = new SimpleDateFormat("dd-MM-yyyy");
        mascara_horas = new SimpleDateFormat("HH-mm-ss");
        array_dataatual = mascara_dia.format(dataatual).split("-");
        array_horarioatual = mascara_horas.format(dataatual).split("-");

        Calendar cal = Calendar.getInstance();

        cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(array_dataatual[0]));
        cal.set(Calendar.MONTH, Integer.parseInt(array_dataatual[1]) - 1);
        cal.set(Calendar.YEAR, Integer.parseInt(array_dataatual[2]));
        cal.set(Calendar.HOUR, Integer.parseInt(array_horarioatual[0]) + 12);
        cal.set(Calendar.MINUTE, Integer.parseInt(array_horarioatual[1]));
        cal.set(Calendar.SECOND, Integer.parseInt(array_horarioatual[2]));
        dataatual = cal.getTime();
    }

    private String criarNomeDoArquivo() {
        obterDataHorarioAtual();
        ClientesClass objeto_clientesclass = new ClientesClass();
        String nomeArquivoPDFSaida = mascara_dia.format(dataatual) + " às " + mascara_horas.format(dataatual) + " - " + objeto_clientesclass.getNome_cliente() + ".pdf";
        return nomeArquivoPDFSaida;
    }

    private void abrirPDF() {
        try {
            Desktop.getDesktop().open(new File(this.nomeDoArquivo));
        } catch (IOException erro_abrirpdf) {
            System.err.println("Problema ao tentar abrir o arquivo em formato PDF, ERRO: " + erro_abrirpdf);
        }
    }

    private void limparInformacoes() {
        String stringVazia = "";
        DefaultTableModel jTbProdutos_objeto = (DefaultTableModel) this.jTbProdutos.getModel();
        jTbProdutos_objeto.setNumRows(0);
        jTxtNomeCliente.setText(stringVazia);
    }

    private void jBtnInserirManualmenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnInserirManualmenteActionPerformed
        // CÓDIGO DO BOTÃO "INSERIR MANUALMENTE":
        TelaInsercaoManual telaInsercaoManual_objeto = new TelaInsercaoManual();
        telaInsercaoManual_objeto.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jBtnInserirManualmenteActionPerformed

    private void jBtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelarActionPerformed
        // CÓDIGO DO BOTÃO "CANCELAR":
        if (JOptionPane.showConfirmDialog(this, "Deseja limpar TODOS os campos?") == JOptionPane.YES_OPTION) {
            limparInformacoes();
            JOptionPane.showMessageDialog(this, "Informações apagadas!", "OPERAÇÃO CONCLUÍDA!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Nenhuma informação foi alterada!", "ALERTA!", 2);
        }
    }//GEN-LAST:event_jBtnCancelarActionPerformed

    private PdfPTable criarCabecalhoDaTabelaEmPdf() {
        PdfPTable objeto_tabela = new PdfPTable(new float[]{10f, 5f, 3f});
        PdfPCell objeto_celula_nome_produto = new PdfPCell(new Phrase("Nome do produto"));
        objeto_celula_nome_produto.setHorizontalAlignment(Element.ALIGN_CENTER);
        PdfPCell objeto_celula_fabricante = new PdfPCell(new Phrase("Fabricante"));
        objeto_celula_fabricante.setHorizontalAlignment(Element.ALIGN_CENTER);
        PdfPCell objeto_celula_quantidade = new PdfPCell(new Phrase("Quantidade"));
        objeto_celula_quantidade.setHorizontalAlignment(Element.ALIGN_CENTER);

        objeto_tabela.addCell(objeto_celula_nome_produto);
        objeto_tabela.addCell(objeto_celula_fabricante);
        objeto_tabela.addCell(objeto_celula_quantidade);
        return objeto_tabela;
    }
    private void jBtnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSalvarActionPerformed
        // CÓDIGO DO BOTÃO "SALVAR":
        ClientesClass objeto_clientesclass = new ClientesClass();
        objeto_clientesclass.setNome_cliente("Robson Pereira Alameda");
        Document objeto_document = new Document();
        nomeDoArquivo = criarNomeDoArquivo();
        // Criando as fontes:
        Font objeto_font_cabecalho = new Font(Font.FontFamily.TIMES_ROMAN, 20, Font.BOLD);
        Font objeto_font_padrao = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
        Paragraph objeto_paragraph_cabecalho = new Paragraph("LISTA DE SAÍDA DE PRODUTOS", objeto_font_cabecalho);
        objeto_paragraph_cabecalho.setAlignment(Element.ALIGN_CENTER);
        Paragraph objeto_paragraph_padrao = new Paragraph("Este arquivo foi gerado de forma autônoma através do sistema Programa Gerenciador de Vendas (PGDV). Abaixo, têm-se os dados registrados a cerca dos produtos. Este arquivo registra os artigos comprados por " + objeto_clientesclass.getNome_cliente() + " no dia " + mascara_dia.format(dataatual) + ".", objeto_font_padrao);
        objeto_paragraph_padrao.setAlignment(Element.ALIGN_JUSTIFIED);
        objeto_paragraph_padrao.setFirstLineIndent(10);
        try {
            PdfWriter.getInstance(objeto_document, new FileOutputStream(nomeDoArquivo));
            objeto_document.open();
            // Metadados
            objeto_document.addAuthor("Sistema Gerenciador De Vendas");
            objeto_document.addLanguage("pt-br");
            objeto_document.addTitle("LISTA DE SAÍDA DE PRODUTOS");
            objeto_document.addCreationDate();
            // CONTEÚDO DO ARQUIVO:
            // Texto:
            objeto_document.add(objeto_paragraph_cabecalho);
            objeto_document.add(new Paragraph(" "));
            objeto_document.add(objeto_paragraph_padrao);
            objeto_document.add(new Paragraph(" "));
            // Tabela:
            PdfPTable tabela_objeto = this.criarCabecalhoDaTabelaEmPdf();
            if (objeto_document.isOpen()) {
                // A cada linha criada na tabela do layout, deve-se adicionar mais três células, com seus respectivos valores
                PdfPCell celula1 = new PdfPCell(new Phrase("Caneta Preta"));
                celula1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                PdfPCell celula2 = new PdfPCell(new Phrase("BIC"));
                celula2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                PdfPCell celula3 = new PdfPCell(new Phrase("50"));
                celula3.setHorizontalAlignment(Element.ALIGN_RIGHT);

                tabela_objeto.addCell(celula1);
                tabela_objeto.addCell(celula2);
                tabela_objeto.addCell(celula3);
            }
            objeto_document.add(tabela_objeto);

        } catch (FileNotFoundException | DocumentException erro_gerarpdf) {
            System.err.println("Problema ao tentar gerar o arquivo em formato PDF, ERRO: " + erro_gerarpdf);
        } finally {
            objeto_document.close();
        }

        if (JOptionPane.showConfirmDialog(this, "Deseja imprimir a lista de produtos?", "IMPRIMIR?!", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.YES_OPTION) {
            JOptionPane.showMessageDialog(this, "Arquivo enviado para a impressora!", "OPERAÇÃO CONCLUÍDA!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Arquivo PDF gerado!", "OPERAÇÃO CONCLUÍDA!", JOptionPane.INFORMATION_MESSAGE);
            abrirPDF();
        }
    }//GEN-LAST:event_jBtnSalvarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new TelaPrincipal().setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(TelaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnCancelar;
    private javax.swing.JButton jBtnInserirManualmente;
    private javax.swing.JButton jBtnSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTbProdutos;
    private javax.swing.JTextField jTxtNomeCliente;
    // End of variables declaration//GEN-END:variables
}
